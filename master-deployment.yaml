apiVersion: v1 # Service 리소스의 API 버전.
kind: Service # 리소스 종류.
metadata:
  name: backend # Service의 이름.
spec:
  selector: # 이 리소스가 제어하거나 연결해야 하는 다른 리소스를 식별.
    # Deployment와 다르게 matchLabels는 사용하지 않음.
    app: second-app
    tier: backend
  # Service를 노출하는 방법 정의. 여러 Pod가 있을 때 포트에 맞춰서 정의 가능.
  ports:
    - protocol: TCP # 프로토콜 정의. 기본값은 TCP.
      port: 80 # Service가 노출할 포트.
      targetPort: 8080 # Service가 제어하는 Pod의 포트.
    # 추가 포트를 설정하려면 주석을 해제하고 수정.
    # - protocol: TCP
    #   port: 443
    #   targetPort: 443
  type: LoadBalancer # Service를 노출하는 방법 정의. 기본값은 ClusterIP(내부 IP 노출). NodePort(기본적으로 실행되는 워커 노드의 IP와 포트에 노출), ClusterIP, LoadBalancer(외부 액세스) 중 선택 가능.
--- # '-' 3개로 완전히 새로운 객체가 시작됨을 의미. service와 deployment를 동일한 파일 중 하나에 결합하는 경우, service를 먼저 배치하는 편이 좋음. service에 selector가 있기 때문에 그 이후에 생성되는 모든 부분은 동적으로 추가됨.
apiVersion: apps/v1 # Kubernetes Deployment yaml. 최신 버전은 Kubernetes Docs에서 확인.
kind: Deployment # 리소스 종류. 다른 옵션으로는 Service, Job 등이 있음.
metadata:
  name: second-app-deployment # Deployment의 이름.
spec: # Deployment의 구성 방법 정의.
  replicas: 1 # Pod의 복제본 수. 기본값은 1.
  selector:
    matchLabels: # matchExpressions를 사용하여 라벨 선택 가능.
      # Deployment가 제어할 Pod 라벨의 키-값 쌍을 정의.
      app: second-app
      tier: backend
  template: # Pod의 구성 방법 정의.
    metadata:
      labels: # Pod 라벨 정의.
        app: second-app # "app" 대신 원하는 라벨 키 정의 가능.
        tier: backend
    spec: # Pod 구성 방법 정의.
      containers: # '-'를 통해 여러 컨테이너 설정 가능.
        - name: second-node # 컨테이너 이름.
          image: devyuminkim/kub-first-app:2 # 컨테이너 이미지.
